// <auto-generated />
using DAL.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace DAL.Migrations
{
    [DbContext(typeof(ApiContext))]
    partial class ApiContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DAL.Core.Models.Event", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AddedBy");

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description");

                    b.Property<string>("EventDate");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Notes");

                    b.Property<string>("State");

                    b.Property<string>("Street");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("AddedBy");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("DAL.Core.Models.EventAttendance", b =>
                {
                    b.Property<string>("EventId");

                    b.Property<string>("UserId");

                    b.HasKey("EventId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("EventAttendance");
                });

            modelBuilder.Entity("DAL.Core.Models.Mandal", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Area");

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Notes");

                    b.Property<string>("State");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("Mandal");
                });

            modelBuilder.Entity("DAL.Core.Models.Sabha", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Area");

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<bool>("IsActive");

                    b.Property<string>("SabhaTypeId");

                    b.Property<string>("State");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("SabhaTypeId");

                    b.ToTable("Sabha");
                });

            modelBuilder.Entity("DAL.Core.Models.SabhaType", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsActive");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("SabhaType");
                });

            modelBuilder.Entity("DAL.Core.Models.SabhaUsers", b =>
                {
                    b.Property<string>("SabhaId");

                    b.Property<string>("UserId");

                    b.HasKey("SabhaId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("SabhaUsers");
                });

            modelBuilder.Entity("DAL.Core.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("AddedBy");

                    b.Property<string>("BirthDay");

                    b.Property<string>("BirthMonth");

                    b.Property<string>("BirthYear");

                    b.Property<string>("Comments");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Designation");

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<long?>("FacebookId");

                    b.Property<string>("FirstName");

                    b.Property<string>("Gender");

                    b.Property<string>("HomePhone");

                    b.Property<bool>("IsAdmin");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("MandalId");

                    b.Property<string>("MidName");

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("NormalizedUserName");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("PictureUrl");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName");

                    b.Property<string>("UserTypeId");

                    b.HasKey("Id");

                    b.HasIndex("AddedBy");

                    b.HasIndex("MandalId");

                    b.HasIndex("UserTypeId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("DAL.Core.Models.UserType", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsActive");

                    b.Property<string>("Notes");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("UserType");
                });

            modelBuilder.Entity("DAL.Core.Models.Event", b =>
                {
                    b.HasOne("DAL.Core.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("AddedBy");
                });

            modelBuilder.Entity("DAL.Core.Models.EventAttendance", b =>
                {
                    b.HasOne("DAL.Core.Models.Event", "Event")
                        .WithMany("Users")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Core.Models.User", "User")
                        .WithMany("Attendance")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Core.Models.Sabha", b =>
                {
                    b.HasOne("DAL.Core.Models.SabhaType", "SabhaType")
                        .WithMany("Sabha")
                        .HasForeignKey("SabhaTypeId");
                });

            modelBuilder.Entity("DAL.Core.Models.SabhaUsers", b =>
                {
                    b.HasOne("DAL.Core.Models.Sabha", "Sabha")
                        .WithMany("Users")
                        .HasForeignKey("SabhaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Core.Models.User", "User")
                        .WithMany("Sabhas")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Core.Models.User", b =>
                {
                    b.HasOne("DAL.Core.Models.User", "AdminId")
                        .WithMany()
                        .HasForeignKey("AddedBy");

                    b.HasOne("DAL.Core.Models.Mandal", "Mandal")
                        .WithMany("User")
                        .HasForeignKey("MandalId");

                    b.HasOne("DAL.Core.Models.UserType", "UserType")
                        .WithMany()
                        .HasForeignKey("UserTypeId");
                });
#pragma warning restore 612, 618
        }
    }
}
